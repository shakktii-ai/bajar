// import Head from "next/head";

// import { useState, useEffect, useRef } from "react";

// import Carousel from "@/components/carousel";

// export default function Home({Logout, user}) {
//   const [dropdown, setDropdown] = useState(false);
//   const [cart, setCart] = useState([]);
//   const [products, setProducts] = useState([]); // This will hold the products fetched from the API

//   // Toggle dropdown menu
//   const toggleDropdown = () => setDropdown((prev) => !prev);

//   // Fetch products using a GET API call
//   const fetchProducts = async () => {
//     try {
//       const res = await fetch('/api/addAndGetProducts'); // Adjust API endpoint as necessary
//       const data = await res.json();
//       setProducts(data); // Set the fetched products
//     } catch (error) {
//       console.error("Error fetching products:", error);
//     }
//   };

//   // Add a product to the cart
//   const addToCart = (product) => {
//     setCart((prevCart) => [...prevCart, product]);
//   };

//   // Function to calculate time ago
//   const timeAgo = (timestamp) => {
//     const currentTime = new Date();
//     const productTime = new Date(timestamp);
//     const diffInMinutes = Math.floor((currentTime - productTime) / (1000 * 60));
//     return diffInMinutes <= 0 ? "Just now" : `${diffInMinutes} min ago`;
//   };

//   // Function to calculate average price
//   const calculateAvgPrice = (max, min) => {
//     return ((max + min) / 2).toFixed(2);
//   };

//   // UseEffect to fetch products when the component mounts
//   useEffect(() => {
//     fetchProducts();
//   }, []);
//   return (
//     <>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//     <div className="text-center m-36 ">
//       <div className="flex justify-center flex-col items-center font-bold text-7xl">
//         <h1 className="block">Welcome to Khetiwadi for</h1> <h2> daily Mandi Bhav.</h2>
//         </div>
//       <h2 className="text-sm block mt-10">There are many mandi bhav websites but difficult to use. On the other hand, we provide the detailed mandi bhav,</h2><h2> and we hope that we are providing you the correct information.</h2>
//         </div>



//       <div className=" h-[10rem] md:h-[30rem] overflow-y-hidden  rounded-xl m-2">
//        <Carousel />
//        </div>





//       <div className="grid grid-cols-1 md:grid-cols-2 gap-6 m-2">
//   {/* Card 1 */}
// {products.length === 0 ? (
//   <p>Loading products...</p>
// ) : (
//   products.map((product) => (
//   <div className="bg-white rounded-lg shadow-md border border-gray-200 p-4">
//     <div className="flex gap-2 items-center">
//       <span className="bg-green-700 text-white text-sm px-3 py-1 rounded-md">
//       {timeAgo(product.createdAt)} 
//       </span>
//       <span className="bg-green-700 text-white text-sm px-3 py-1 rounded-md">
//       {product.createdAt}
//       </span>
//     </div>
//     <div className="grid grid-cols-2 gap-4 mt-2">
//       {/* Left Content */}
//       <div>
//         <h2 className="text-xl font-bold">{product.productNameEnglish}</h2>
//         <p className="text-gray-500">{product.productNameMarathi}</p>
        
//       </div>
//       {/* Right Price Details */}
//       <div className="text-right">
//         <p className="text-gray-700 font-semibold">कीमत:</p>
//         <p className="text-sm text-gray-700">
//           Max: <span className="text-green-700 font-bold">₹ {product.PriceMax}</span>
//         </p>
//         <p className="text-sm text-white bg-red-500 lg:ml-[12rem] ml-[4rem] p-[0.2rem] rounded-lg">
//           Min: <span className="text-white font-bold">₹{product.PriceMin}</span>
//         </p>
//         <p className="text-sm text-gray-700">
//           Avg: <span className="text-green-700 font-bold">₹ {calculateAvgPrice(product.PriceMax, product.PriceMin)}</span>
//         </p>
//         <p className="text-xs text-gray-500">(1{product.ProductInUnit})</p>
//       </div>
//     </div>
//   </div>
// ))
// )}
  
//   </div>


//     </>
//   );
// }



import Head from "next/head";
import { useState, useEffect } from "react";
import Carousel from "@/components/carousel";

export default function Home({ Logout, user }) {
  const [dropdown, setDropdown] = useState(false);
  const [cart, setCart] = useState([]);
  const [products, setProducts] = useState([]); // This will hold the products fetched from the API

  // Toggle dropdown menu
  const toggleDropdown = () => setDropdown((prev) => !prev);

  // Fetch products using a GET API call
  const fetchProducts = async () => {
    try {
      const res = await fetch('/api/addAndGetProducts'); // Adjust API endpoint as necessary
      const data = await res.json();

      // Ensure the data is an array before setting it
      if (Array.isArray(data)) {
        setProducts(data);
      } else {
        console.error("Fetched data is not an array:", data);
      }
    } catch (error) {
      console.error("Error fetching products:", error);
    }
  };

  // Add a product to the cart
  const addToCart = (product) => {
    setCart((prevCart) => [...prevCart, product]);
  };

  // Function to calculate time ago
  const timeAgo = (timestamp) => {
    const currentTime = new Date();
    const productTime = new Date(timestamp);
    const diffInMinutes = Math.floor((currentTime - productTime) / (1000 * 60));
    return diffInMinutes <= 0 ? "Just now" : `${diffInMinutes} min ago`;
  };

  // Function to calculate average price
  const calculateAvgPrice = (max, min) => {
    const avg = (parseFloat(max) + parseFloat(min)) / 2;
    return isNaN(avg) ? "N/A" : avg.toFixed(2);
  };

  // UseEffect to fetch products when the component mounts
  useEffect(() => {
    fetchProducts();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="text-center m-36 ">
        <div className="flex justify-center flex-col items-center font-bold text-7xl">
          <h1 className="block">Welcome to Khetiwadi for</h1> 
          <h2> daily Mandi Bhav.</h2>
        </div>
        <h2 className="text-sm block mt-10">There are many mandi bhav websites but difficult to use. On the other hand, we provide the detailed mandi bhav,</h2>
        <h2> and we hope that we are providing you the correct information.</h2>
      </div>

      <div className=" h-[10rem] md:h-[30rem] overflow-y-hidden  rounded-xl m-2">
        <Carousel />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 m-2">
        {/* Card 1 */}
        {products.length === 0 ? (
          <p>Loading products...</p>
        ) : (
          products.map((product) => (
            <div key={product._id || product.productNameEnglish} className="bg-white rounded-lg shadow-md border border-gray-200 p-4">
              <div className="flex gap-2 items-center">
                <span className="bg-green-700 text-white text-sm px-3 py-1 rounded-md">
                  {timeAgo(product.createdAt)} 
                </span>
                <span className="bg-green-700 text-white text-sm px-3 py-1 rounded-md">
                  {new Date(product.createdAt).toLocaleString()} {/* Ensure date formatting */}
                </span>
              </div>
              <div className="grid grid-cols-2 gap-4 mt-2">
                {/* Left Content */}
                <div>
                  <h2 className="text-xl font-bold">{product.productNameEnglish}</h2>
                  <p className="text-gray-500">{product.productNameMarathi}</p>
                </div>
                {/* Right Price Details */}
                <div className="text-right">
                  <p className="text-gray-700 font-semibold">कीमत:</p>
                  <p className="text-sm text-gray-700">
                    Max: <span className="text-green-700 font-bold">₹ {product.PriceMax}</span>
                  </p>
                  <p className="text-sm text-white bg-red-500 lg:ml-[12rem] ml-[4rem] p-[0.2rem] rounded-lg">
                    Min: <span className="text-white font-bold">₹ {product.PriceMin}</span>
                  </p>
                  <p className="text-sm text-gray-700">
                    Avg: <span className="text-green-700 font-bold">₹ {calculateAvgPrice(product.PriceMax, product.PriceMin)}</span>
                  </p>
                  <p className="text-xs text-gray-500">(1{product.ProductInUnit})</p>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </>
  );
}
